# Data Science 101 {#sec-munging}

::: {.callout-note appearance="simple"}
Today we focus on the practice of manipulating data in R
:::

## Introduction

> 'Tidy datasets are all alike, but every messy dataset is messy in its own way.'\
> --- Hadley Wickham

![Hadley Wickham - Creator of the Tidyverse](https://pbs.twimg.com/profile_images/905186381995147264/7zKAG5sY_400x400.jpg){width="200"}

Mr. Wickham is of course quoting Tolstoy, but his observation is poignant and correct. Much of the work in data visualization is finagling one's dataset.

Today, we will focus on some key functions to `tidy` messy data, as compiled by me. Examples will be provided using data from previous lectures.

Let's get started with initializing today's R script to include the libraries we'll be using. Start with `tidyverse` and `sf`.

```{r}
#| label: load libraries
#| echo: true
#| message: false

library(tidyverse)
library(sf)

```

Next, install and load `janitor`.

```{r}
#| label: install janitor example
#| echo: true
#| eval: false

install.packages('janitor')

```

```{r}
#| label: load janitor
#| echo: true
#| message: false

library(janitor)
library(knitr)

```

### [`st_transform()`](https://r-spatial.github.io/sf/reference/st_transform.html)

`st_transform()` transforms or converts coordinates of simple feature geospatial data. Spatial projections are fraught with peril in geospatial visualizations.  Our first function is one that has been used a bunch of times - `st_transform()`. Leaflet needs its data transformed into WGS84 and `st_transform()` is the function that makes the coordinate reference system go the right place. 

```{r}
#| label: Import SoCalEJ and warehouse data
#| echo: true
#| message: false

URL.path <- 'https://raw.githubusercontent.com/RadicalResearchLLC/EDVcourse/main/CalEJ4/CalEJ.geoJSON'
SoCalEJ <- st_read(URL.path) %>% 
  st_transform("+proj=longlat +ellps=WGS84 +datum=WGS84")

WH.url <- 'https://raw.githubusercontent.com/RadicalResearchLLC/WarehouseMap/main/WarehouseCITY/geoJSON/finalParcels.geojson'
warehouses <- st_read(WH.url) %>% 
  st_transform("+proj=longlat +ellps=WGS84 +datum=WGS84")

```

### [`janitor::clean_names()`](https://www.rdocumentation.org/packages/janitor/versions/1.2.0/topics/clean_names)

The first step in being able to deal with a dataset is to have the names of the variables comport with standard R naming format. `clean_names()` gets rid of those spaces and standardizes the capitalization of letters for column names.  

If your dataset column names have spaces or strange characters (parentheses, $, or /), the best way to deal with that is to instantly run `clean_names()`. R functions do not like special characters in variable names.  

In @sec-debt we used `janitor::clean_names()` to fix the import of the ecological footprint excel spreadsheet.  Here's the example again.

### FIXME - add a section on 'clean_names()' using SoCalEJ

### [`filter()`](https://dplyr.tidyverse.org/reference/filter.html)

`filter()` is used to subset a data table, retaining any rows that meet the conditions of the filter. 

- `filter()` is used on numbers by applying operators (e.g., >, =, <, >=, <=).  
- `filter()` can be applied on character strings by using the identity operator `==`.  
- `filter()` can be applied to multiple character strings by using the %in% operator on lists.  

In the first example, `filter()`was applied to remove the values that were set at -999; we only believed values from 0-100 were reasonable.  @fig-Asthma_county1 uses `filter()` to remove those values. I've also shown an example without the filter applied in @fig-Asthma_all . Not removing those rows messes up our visualization.   

```{r}
#| label: fig-Asthma_county1
#| fig-cap: Asthma census tract distribution by county
#| echo: true
#| warning: false

SoCalEJ %>% 
  filter(AsthmaP >= 0) %>% 
  ggplot(aes(x = County, y = AsthmaP)) +
  geom_boxplot()

```
```{r}
#| label: fig-Asthma_all
#| fig-cap: Asthma census tract distribution by county without filter
#| echo: true
#| warning: false
SoCalEJ %>% 
  #filter()
  ggplot(aes(x = County, y = AsthmaP)) +
  geom_boxplot()
```


In @sec-EJdata we also applied filter in two successive data transformations that are good examples of data munging. After creating a narrow data set, we apply `filter(value >=0)` to remove all negative values. Then we applied `filter(variable %in% c('OzoneP', 'DieselPM_P', 'PolBurdP'))` to select three specific variable choices out of the 55 we had available. If we exclude that second filter, the plot becomes crazy busy.  

```{r}
#| label: Tidy data for manipulation
#| echo: true
#| warning: false

# select socioeconomic indicators and make them narrow - only include counties above 70%
SoCal_narrow <- SoCalEJ %>% 
  st_set_geometry(value = NULL) %>% 
  pivot_longer(cols = c(5:66), names_to = 'variable', values_to = 'value') %>% 
  filter(value >=0)

SoCal_narrow %>% 
  filter(variable %in% c('OzoneP', 'DieselPM_P', 'PolBurdP')) %>% 
  ggplot(aes(x = County, y = value, fill= variable)) +
  geom_boxplot()

SoCal_narrow %>% 
  #filter(variable %in% c('OzoneP', 'DieselPM_P', 'PolBurdP')) %>% 
  ggplot(aes(x = County, y = value, fill= variable)) +
  geom_boxplot()

```

### [`select()`](https://dplyr.tidyverse.org/reference/select.html)

`select()` variables (i.e., columns) in a data table for retention. 

- `select()` can be applied to subsets column number or name.
- `select()` also has some pattern matching helpers.  

@sec-EJTheory included an example of using `select()` on the SoCalEJ dataset. The raw dataset is MESSY! 

FIXME

### [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html)

`mutate()` adds new variables and preserves existing ones. `mutate()` can be used to overwrite existing variables - careful with name choices.

This is a great function for synthesizing information, transformations, and combining variables. 

- changing units - use `mutate()`
- creating a rate or normalizing data - use `mutate()`
- need a new variable or category - use `mutate()`

I used `mutate()` to create a decimal date function for our CH~4~ visualizations in @sec-import.  I used `mutate()` to correct the spelling of _San Bernardino_ in @sec-EJtools, in combination with the `ifelse()` function. I used `mutate()` in @sec-research to calculate volumes of rain by multiplying precipitation values (inches) by area (m^2^) of counties.

Let's use `mutate()` to convert the TRI ethylene oxide emissions from pounds to kilograms to avoid imperialism. 

1 pound = 0.453592 kilograms

FIXME

### [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html)

`summarize()` creates a new table that reduces a dataset to a summary of all observations.  When combined with the `group_by()` function, it allows extremely powerful manipulation and generation of summary statistics about a dataset.  

I have not demonstrated `summarize()` yet in this class, which is a major deficiency on my part.  Let's examine it with `TRI_2021`.



A more interesting example includes the `group_by()` function. This function identifies categories to summarize the data by.  The SoCalEJ_narrow dataset has some simple grouping categories that can be used to show this. 

```{r}
#| label: group by summarize on SoCal_narrow
#| echo: true


SoCal_basic <- SoCal_narrow %>% 
  group_by(variable) %>% 
  summarize(count = n(), average = mean(value), min = min(value), max =       max(value), stdev = sd(value))

kable(SoCal_basic, digits = 1, caption = 'An example summary Table',
      format.args = list(scientific = FALSE))
```

And of course, we can combine our functions to dig even deeper. This example focuses on just a few variables to group the data into smaller subsets of County.

```{r}
#| label: group by summarize complicated
#| echo: true



SoCal_complicated <- SoCal_narrow %>% 
  filter(variable %in% c('CIscoreP', 'AsthmaP', 'LowBirWP', 'CardiovasP')) %>% 
  group_by(variable, County) %>% 
  summarize(count = n(), average = mean(value), min = min(value), max =       max(value), stdev = sd(value))

kable(SoCal_complicated, digits = 1, caption = 'An example summary Table',
      format.args = list(scientific = FALSE))

```

