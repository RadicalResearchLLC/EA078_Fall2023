# Advanced Spatial Analysis {#sec-advanced_maps}

::: {.callout-note appearance="simple"}
Today we will be focusing on the practice of fancy geospatial data analysis and visualization.
:::

## Overview

Today will cover three things.  

- Layer Controls
- Buffers

### Libraries

```{r}
#| label: load libraries
#| echo: true

library(tidyverse)
library(sf)
library(leaflet)

```
  
## Data

We'll use the CalEnviroScreen dataset (SoCalEJ) from other classes and the warehouses dataset for San Bernardino for this example.  

Let's load the old SoCalEJ but only the San Bernardino County census tracts. We'll call it `SBDCoEJ` to differentiate it.

```{r}
#| echo: true

URL.path <- 'https://raw.githubusercontent.com/RadicalResearchLLC/EDVcourse/main/CalEJ4/CalEJ.geoJSON'
SBDCoEJ <- st_read(URL.path) |>  
  filter(County == 'San Bernardino') |> 
  st_transform("+proj=longlat +ellps=WGS84 +datum=WGS84")

```

Now let's load the SBD County warehouses.

```{r}
#| echo: true

WH.url <- 'https://raw.githubusercontent.com/RadicalResearchLLC/WarehouseMap/main/WarehouseCITY/geoJSON/comboFinal.geojson'
SBDwarehouses <- st_read(WH.url) |>  
  filter(county == 'San Bernardino') |>  
  filter(category == 'Existing') |> 
  st_transform("+proj=longlat +ellps=WGS84 +datum=WGS84")

```

### Example 1 - Layers Control on Leaflet maps

Let's make a leaflet map showing the distribution of Hispanic census tracts in San Bernardino County.  

First, we need to define the color palette.  Feel free to choose a different palette.  I'll choose five quantile bins to get a round 20% number.

```{r}
#| echo: true

palHispanic <- colorQuantile(palette = 'BuPu',
                             domain = SBDCoEJ$Hispanic,
                             n = 5)

```

@fig-SBDHispanic shows the distribution of census tracts with a legend in a leaflet map.

```{r}
#| label: fig-SBDHispanic
#| echo: true
#| fig-cap: Percentage of Hispanic residents by census tract

leaflet()  |>  
  addProviderTiles(providers$CartoDB.Positron) |> 
   setView(lat = 34.1, lng = -117.34, zoom = 10) |> 
  addPolygons(data = SBDCoEJ,
              color = ~palHispanic(Hispanic),
              weight = 1) |> 
  addLegend(data = SBDCoEJ,
            pal = palHispanic,
            title = "% Hispanic",
            values = ~Hispanic)

```

Pretty good.

Now let's make a map with warehouses.  We'll make the warehouses black and show the same area.

@fig-SBDwarehouses shows the result.

```{r}
#| label: fig-SBDwarehouses
#| echo: true
#| fig-cap: Warehouses in SBD County

leaflet()  |>  
  addProviderTiles(providers$CartoDB.Positron) |> 
   setView(lat = 34.1, lng = -117.34, zoom = 10) |> 
  addPolygons(data = SBDwarehouses,
              color = 'black',
              weight = 1,
              fillOpacity = 0.7) |> 
  addLegend(data = SBDwarehouses,
            colors = 'black',
            labels = 'Existing warehouses')

```

Now let's combine the two maps and show both at the same time.

All we need to do here is pull the `AddPolygons()` and `AddLegend()` functions from both individual maps into a single code chunk.  No new code at this point.  Note that each call has to include the data we are pointing to individually.

@fig-wh_and_hispanicTracts shows the combined overlays.  

```{r}
#| label: fig-wh_and_hispanicTracts
#| echo: true
#| fig-cap: Warehouses and percent Hispanic

leaflet()  |>  
  addProviderTiles(providers$CartoDB.Positron) |> 
   setView(lat = 34.1, lng = -117.34, zoom = 10) |> 
  addPolygons(data = SBDwarehouses,
              color = 'black',
              weight = 1,
              fillOpacity = 0.7) |> 
  addLegend(data = SBDwarehouses,
            colors = 'black',
            labels = 'Existing warehouses') |> 
  addPolygons(data = SBDCoEJ,
              color = ~palHispanic(Hispanic),
              weight = 1) |> 
  addLegend(data = SBDCoEJ,
            pal = palHispanic,
            title = "% Hispanic",
            values = ~Hispanic)

```

Now let's add in the layers control to toggle the individual layers on and off.

This requires one new function `addLayersControl()`.  It includes an overlay option called `overlayGroups`. Lastly we add a new argument in the existing code chunk that defines each layers as a `group`.  Note that including group identifiers for both Polygons and Legends is required to have them both toggle on and off.

@fig-overlay shows the working toggles as a little stack in the upper right corner above the legends.  

```{r}
#| label: fig-overlay
#| echo: true
#| fig-cap: Warehouses and percent Hispanic with overlay toggles

leaflet()  |>  
  addProviderTiles(providers$CartoDB.Positron) |> 
  setView(lat = 34.1, lng = -117.34, zoom = 10) |> 
  addLayersControl(overlayGroups = c('Warehouses', '% Hispanic')) |> 
  addPolygons(data = SBDwarehouses,
              color = 'black',
              weight = 1,
              fillOpacity = 0.7,
              group = 'Warehouses') |> 
  addLegend(data = SBDwarehouses,
            colors = 'black',
            labels = 'Existing warehouses',
            group = 'Warehouses') |> 
  addPolygons(data = SBDCoEJ,
              color = ~palHispanic(Hispanic),
              weight = 1,
              group = '% Hispanic') |> 
  addLegend(data = SBDCoEJ,
            pal = palHispanic,
            title = "% Hispanic",
            values = ~Hispanic,
            group = '% Hispanic') 


```

Voila!

### Example 2 - Create a  buffer around a point or polygon.

The function `st_buffer()` from the `sf` package allows one to generate larger shapes surrounding an existing point, line, or polygon.  

It only requires the existing dataset and a distance.  The only tricky part is figuring out the **unit** one is buffering in.  In some coordinate reference systems, you are in meters.  In others, you are in decimal degrees.  The buffer distance of 1000 meters is useful, but 1000 latitude degrees goes off map.  

Allow me to demonstrate a buffer map with the Gardens dataset. We'll do a coordinate transformation to NAD83 (a meter based projection) and then back.  

```{r}
#| echo: true
#| label: fig-BufferExample
#| fig-cap: San Bernardino County census tract 1000 m buffers

gardens <- st_read(dsn = 'CommunityGardens.geojson') |> 
  filter(County == 'San Bernardino') |> 
  #transform to NAD83 meters based coordinates
  st_transform(crs = 4269)

buffer_gardens <- gardens |> 
  st_buffer(dist = 1000) |> 
  #transform back to WGS84 for map
  st_transform(crs = 4326)

leaflet() |> 
  addTiles() |> 
    setView(lat = 34.1, lng = -117.34, zoom = 10) |> 
    addPolygons(data = SBDCoEJ,
              color = ~palHispanic(Hispanic),
              weight = 1,
              group = '% Hispanic') |> 
    addPolygons(data = buffer_gardens,
                color = 'darkgreen',
                fillOpacity = 0.8,
                label = ~Name)

```

#### Class Exercise

- Add a `layersControl()` to this map to toggle on and off the gardens and Hispanic layers.




